@using KnockoutjsDemo1.Models;
@model KnockoutjsDemo1.Models.Order

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Order</legend>

            
            <input data-bind="value: TotalAmount" type="text" />
           <p><span data-bind="text: TotalAmount"></span></p>


        <h2>OrderDetials <span data-bind="text: OrderDetails().length"></span></h2>
        <ul data-bind="template: { name: 'person-template', foreach: OrderDetails }" ></ul>
        <script id='person-template' type='text/x-jquery-tmpl'>
            <li>
                <p><span data-bind="text:Description"></span></p>
                <button data-bind="click: remove">Remove Order</button>
            </li>
        </script>
        <button data-bind="click: addOrderD">Add Order</button>
        <p>
            <input type="submit"   value="Create" data-bind="click: save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/knockout-2.1.0.debug.js"></script>
<script src="~/Scripts/knockout-2.1.0.js"></script>
<script src="~/Scripts/jquery-1.8.2.js"></script>
<script src="~/Scripts/jquery-ui-1.8.20.js"></script>
<script type="text/javascript">

    function orderDetail(pId,pQty,pNot) {
        return {
            ProductId: ko.observable(pId),
            Quantity: ko.observable(pQty),
            Description: ko.observable(pNot),
            remove: function () {
                OrderViewModel.OrderDetails.remove(this);
            }
        };
    }
    
    var OrderViewModel= {
        BranchId: ko.observable(0),
        CustomerId: ko.observable(0),
        EmployeeId: ko.observable(0),
        PaymentMethod: ko.observable("Cash"),
        TotalAmount: ko.observable(100),
        PaidAmount: ko.observable(0),
        PaymentDate: ko.observable(Date.now),
        OrderStatus: ko.observable("Open"),
        OrderDetails: ko.observableArray([new orderDetail(1, 2, "Test")]),
        addOrderD: function () {
            this.OrderDetails.push(new orderDetail(2, 4, "Test2"));
        },
        save: function () {
            $.ajax({
                url: "@Url.Action("Create")",
            type: "post",
            data: ko.toJSON(this),
            contentType: "application/json",
            success: function (result) { alret(result.message) }
        });

        }
    };
    ko.applyBindings(OrderViewModel);
</script>